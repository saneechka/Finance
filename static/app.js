async function makeRequest(endpoint, method, data) {
    try {
        const button = document.querySelector(`button[onclick="${getOperationName(endpoint)}()"]`);
        button.classList.add('processing');
        
        if (!navigator.onLine) {
            throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
        }

        const apiEndpoint = `/deposit${endpoint}`;
        const response = await fetch(apiEndpoint, {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        }).catch(error => {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
        });

        let result;
        try {
            result = await response.json();
        } catch (e) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        if (response.ok) {
            const successMessage = getSuccessMessage(endpoint);
            showFeedback('success', successMessage);
        } else {
            const errorMsg = result.error || result.message || getErrorMessage(endpoint, response.status);
            showFeedback('error', errorMsg);
        }

        return { status: response.status, data: result };
    } catch (error) {
        const errorMsg = getNetworkErrorMessage(error);
        showFeedback('error', errorMsg);
        return { status: 500, data: { error: error.message } };
    } finally {
        const button = document.querySelector(`button[onclick="${getOperationName(endpoint)}()"]`);
        if (button) button.classList.remove('processing');
    }
}

function getNetworkErrorMessage(error) {
    const networkErrors = {
        'Failed to fetch': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É',
        'NetworkError': '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º',
        '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
        '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞': '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
    };

    for (const [errorText, message] of Object.entries(networkErrors)) {
        if (error.message.includes(errorText)) {
            return message;
        }
    }
    
    return `–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${error.message}`;
}

function getErrorMessage(endpoint, statusCode) {
    const commonErrors = {
        400: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞',
        401: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        403: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
        404: '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        408: '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ',
        429: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
        500: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        502: '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        503: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        504: '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ'
    };

    const specificErrors = {
        '/create': {
            400: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞',
            409: '–î–µ–ø–æ–∑–∏—Ç —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        },
        '/deposit/transfer': {
            400: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–∞',
            404: '–û–¥–∏–Ω –∏–∑ —Å—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω',
            409: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ —Å—á–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
        },
        '/deposit/freeze': {
            400: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–º–æ—Ä–æ–∑–∫–∏',
            404: '–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
            409: '–î–µ–ø–æ–∑–∏—Ç —É–∂–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
        },
        '/deposit/block': {
            400: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏',
            404: '–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
            409: '–î–µ–ø–æ–∑–∏—Ç —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
        },
        '/deposit/unblock': {
            400: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏',
            404: '–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
            403: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏'
        },
        '/deposit/delete': {
            400: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
            404: '–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
            409: '–î–µ–ø–æ–∑–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω: –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'
        }
    };

    return (specificErrors[endpoint] && specificErrors[endpoint][statusCode]) || 
           commonErrors[statusCode] || 
           '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏';
}

function getOperationName(endpoint) {
    const operations = {
        '/create': 'createDeposit',
        '/transfer': 'transferBetweenAccounts',
        '/freeze': 'freezeDeposit',
        '/block': 'blockDeposit',
        '/unblock': 'unblockDeposit',
        '/delete': 'deleteDeposit'
    };
    return operations[endpoint];
}

function getSuccessMessage(endpoint) {
    const messages = {
        '/create': '–î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üéâ',
        '/transfer': '–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω! üí∏',
        ' /freeze': '–î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω! ‚ùÑÔ∏è',
        ' /block': '–î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! üîí',
        ' /unblock': '–î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! üîì',
        ' /delete': '–î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! üóëÔ∏è'
    };
    return messages[endpoint];
}

function showFeedback(type, message) {
    const feedbackDiv = document.createElement('div');
    feedbackDiv.className = `feedback-message ${type}`;
    
    const icons = {
        processing: '‚è≥',
        success: '‚úÖ',
        error: '‚ùå'
    };

    feedbackDiv.innerHTML = `
        <span class="feedback-icon">${icons[type]}</span>
        <span class="feedback-text">${message}</span>
        <button onclick="this.parentElement.remove()" class="feedback-close">√ó</button>
    `;

    // Remove any existing feedback after 3 seconds
    const existingFeedback = document.querySelector('.feedback-message');
    if (existingFeedback) {
        existingFeedback.remove();
    }

    document.body.appendChild(feedbackDiv);
    
    // Auto-hide after 3 seconds for success/error messages
    if (type !== 'processing') {
        setTimeout(() => {
            feedbackDiv.classList.add('fade-out');
            setTimeout(() => feedbackDiv.remove(), 500);
        }, 3000);
    }
}

async function createDeposit() {
    const button = document.querySelector('button[onclick="createDeposit()"]');
    button.classList.add('processing');
    
    const data = {
        client_id: parseInt(document.getElementById('create_client_id').value),
        bank_name: document.getElementById('create_bank_name').value,
        amount: parseFloat(document.getElementById('create_amount').value),
        interest: parseFloat(document.getElementById('create_interest').value)
    };

    try {
        const result = await makeRequest('/create', 'POST', data);
        if (result.status >= 200 && result.status < 300) {
            showFeedback('success', '–î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üéâ');
            // Clear form
            ['create_client_id', 'create_bank_name', 'create_amount', 'create_interest']
                .forEach(id => document.getElementById(id).value = '');
        } else {
            showFeedback('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞');
        }
    } finally {
        button.classList.remove('processing');
    }
}

async function transferBetweenAccounts() {
    const button = document.querySelector('button[onclick="transferBetweenAccounts()"]');
    button.classList.add('processing');
    
    const data = {
        client_id: parseInt(document.getElementById('transfer_client_id').value),
        bank_name: document.getElementById('transfer_bank_name').value,
        from_account: parseInt(document.getElementById('from_account').value),
        to_account: parseInt(document.getElementById('to_account').value),
        amount: parseFloat(document.getElementById('transfer_amount').value)
    };

    try {
        const result = await makeRequest('/deposit/transfer', 'POST', data);
        if (result.status >= 200 && result.status < 300) {
            showFeedback('success', '–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω! üí∏');
        } else {
            let errorMsg = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞';
            switch (result.status) {
                case 400:
                    errorMsg = '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞';
                    break;
                case 404:
                    errorMsg = '–û–¥–∏–Ω –∏–∑ —Å—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω';
                    break;
                case 403:
                    errorMsg = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞';
                    break;
                case 409:
                    errorMsg = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ';
                    break;
            }
            showFeedback('error', errorMsg);
        }
    } finally {
        button.classList.remove('processing');
    }
}

async function freezeDeposit() {
    const button = document.querySelector('button[onclick="freezeDeposit()"]');
    button.classList.add('processing');
    
    const data = {
        client_id: parseInt(document.getElementById('freeze_client_id').value),
        bank_name: document.getElementById('freeze_bank_name').value,
        freeze_duration: parseInt(document.getElementById('freeze_duration').value)
    };

    try {
        const result = await makeRequest('/deposit/freeze', 'POST', data);
        if (result.status >= 200 && result.status < 300) {
            showFeedback('success', '–î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω! ‚ùÑÔ∏è');
        } else {
            let errorMsg = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∑–∫–µ –¥–µ–ø–æ–∑–∏—Ç–∞';
            switch (result.status) {
                case 400:
                    errorMsg = '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–º–æ—Ä–æ–∑–∫–∏';
                    break;
                case 404:
                    errorMsg = '–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
                    break;
                case 409:
                    errorMsg = '–î–µ–ø–æ–∑–∏—Ç —É–∂–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
                    break;
            }
            showFeedback('error', errorMsg);
        }
    } finally {
        button.classList.remove('processing');
    }
}

async function blockDeposit() {
    const button = document.querySelector('button[onclick="blockDeposit()"]');
    button.classList.add('processing');
    
    const data = {
        client_id: parseInt(document.getElementById('block_client_id').value),
        bank_name: document.getElementById('block_bank_name').value
    };

    try {
        const result = await makeRequest('/deposit/block', 'POST', data);
        if (result.status >= 200 && result.status < 300) {
            showFeedback('success', '–î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! üîí');
        } else {
            let errorMsg = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–µ–ø–æ–∑–∏—Ç–∞';
            switch (result.status) {
                case 400:
                    errorMsg = '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏';
                    break;
                case 404:
                    errorMsg = '–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
                    break;
                case 409:
                    errorMsg = '–î–µ–ø–æ–∑–∏—Ç —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
                    break;
            }
            showFeedback('error', errorMsg);
        }
    } finally {
        button.classList.remove('processing');
    }
}

async function unblockDeposit() {
    const button = document.querySelector('button[onclick="unblockDeposit()"]');
    button.classList.add('processing');
    
    const data = {
        client_id: parseInt(document.getElementById('unblock_client_id').value),
        bank_name: document.getElementById('unblock_bank_name').value
    };

    try {
        const result = await makeRequest('/deposit/unblock', 'POST', data);
        if (result.status >= 200 && result.status < 300) {
            showFeedback('success', '–î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! üîì');
        } else {
            let errorMsg = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–µ–ø–æ–∑–∏—Ç–∞';
            switch (result.status) {
                case 400:
                    errorMsg = '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏';
                    break;
                case 404:
                    errorMsg = '–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
                    break;
                case 403:
                    errorMsg = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏';
                    break;
            }
            showFeedback('error', errorMsg);
        }
    } finally {
        button.classList.remove('processing');
    }
}

async function deleteDeposit() {
    const button = document.querySelector('button[onclick="deleteDeposit()"]');
    button.classList.add('processing');
    
    const data = {
        client_id: parseInt(document.getElementById('delete_client_id').value),
        bank_name: document.getElementById('delete_bank_name').value
    };

    try {
        const result = await makeRequest('/deposit/delete', 'DELETE', data);
        if (result.status >= 200 && result.status < 300) {
            showFeedback('success', '–î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! üóëÔ∏è');
        } else {
            let errorMsg = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞';
            switch (result.status) {
                case 400:
                    errorMsg = '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è';
                    break;
                case 404:
                    errorMsg = '–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
                    break;
                case 409:
                    errorMsg = '–î–µ–ø–æ–∑–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω: –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞';
                    break;
            }
            showFeedback('error', errorMsg);
        }
    } finally {
        button.classList.remove('processing');
    }
}
